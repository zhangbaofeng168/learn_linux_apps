创建socket：
	 int socket(int domain, int type, int protocol);
	 失败返回-1，成功返回创建的socket的id
	 domain：域
	 type：协议类型
	 protocol：和type一起确定协议类型
绑定地址：
	 int bind(int sockfd, const struct sockaddr *addr,
                socklen_t addrlen);
         sockfd：套接字的fd
         addr：要绑定的地址
         	通用的地址类型 struct sockaddr {
               sa_family_t sa_family;/*协议的地址 例：ipv4*/
               char        sa_data[14];
           }
         addrlen：地址的长度
         
         地址转换：
         	in_addr_t inet_addr(const char *cp)/*将字符串转换成整形*/
         		inet_addr("192.168.144.214");
         	char *inet_ntoa(struct in_addr)/*将整形转换成字符串*/
网络字节序：
	规定的是大端模式
	小端模式转化成大端模式
	大端模式转化成小端模式
	发送方：
		htonl (32位)
		htons（16位）
	接受方：
		ntohl()
		ntohs()
	htonl(INADDR_ANY);绑定所有的地址
	大于两个字节的都要转换
监听：
	int listen(int sockfd, int backlog);
	
         backlog：客户机的数目，即允许多少客户端连接
等待连接：
	int accept(int sockfd, struct sockaddr *addr, socklen_t *addrlen);
	导致服务器阻塞
	返回客户机的新的socket fd
	sockfd：创建的socket fd
	sockaddr：客户机的地址	
	addrlen：地址的长度
发送数据：
	 ssize_t send(int sockfd, const void *buf, size_t len, int flags);
接收数据：
	 ssize_t recv(int sockfd, void *buf, size_t len, int flags);
关闭连接：
	 close();
建立连接：连接服务器
	 int connect(int sockfd, const struct sockaddr *addr,
                   socklen_t addrlen);
         sockaddr：服务器的地址
         addrlen：地址的长度
         成功返回0
	
	